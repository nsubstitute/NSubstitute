using NSubstitute.Routing;

// Disable nullability for entry-point API
#nullable disable annotations

namespace NSubstitute.Core;

public class WhenCalled<T>(ISubstitutionContext context, T substitute, Action<T> call, MatchArgs matchArgs)
{
    private readonly ICallRouter _callRouter = context.GetCallRouterFor(substitute!);
    private readonly IThreadLocalContext _threadContext = context.ThreadContext;
    private readonly IRouteFactory _routeFactory = context.RouteFactory;

    /// <summary>
    /// Perform this action when called.
    /// </summary>
    /// <param name="callbackWithArguments"></param>
    public void Do(Action<CallInfo> callbackWithArguments)
    {
        _threadContext.SetNextRoute(_callRouter, x => _routeFactory.DoWhenCalled(x, callbackWithArguments, matchArgs));
        call(substitute);
    }

    /// <summary>
    /// Perform this configured callback when called.
    /// </summary>
    /// <param name="callback"></param>
    public void Do(Callback callback)
    {
        _threadContext.SetNextRoute(_callRouter, x => _routeFactory.DoWhenCalled(x, callback.Call, matchArgs));
        call(substitute);
    }

    /// <summary>
    /// Do not call the base implementation on future calls. For use with partial substitutes.
    /// </summary>
    public void DoNotCallBase()
    {
        _threadContext.SetNextRoute(_callRouter, x => _routeFactory.DoNotCallBase(x, matchArgs));
        call(substitute);
    }

    /// <summary>
    /// Call the base implementation of future calls. For use with non-partial class substitutes.
    /// </summary>
    public void CallBase()
    {
        _threadContext.SetNextRoute(_callRouter, x => _routeFactory.CallBase(x, matchArgs));
        call(substitute);
    }

    /// <summary>
    /// Throw the specified exception when called.
    /// </summary>
    public void Throw(Exception exception) =>
        Do(ci => throw exception);

    /// <summary>
    /// Throw an exception of the given type when called.
    /// </summary>
    public TException Throw<TException>() where TException : Exception, new()
    {
        var exception = new TException();
        Do(_ => throw exception!);
        return exception;
    }

    /// <summary>
    /// Throw an exception generated by the specified function when called.
    /// </summary>
    public void Throw(Func<CallInfo, Exception> createException) =>
        Do(ci => throw createException(ci));

    /// <summary>
    /// Throws the specified exception when called.
    /// </summary>
    /// Prefer <see cref="Throw(System.Exception)" /> for readability.
    public void Throws(Exception exception) =>
        Throw(exception);

    /// <summary>
    /// Throws an exception of the given type when called.
    /// </summary>
    /// Prefer <see cref="Throw{TException}" /> for readability.
    public TException Throws<TException>() where TException : Exception, new()
        => Throw<TException>();

    /// <summary>
    /// Throws an exception generated by the specified function when called.
    /// </summary>
    /// Prefer <see cref="Throw(System.Func{CallInfo, System.Exception})" /> for readability.
    public void Throws(Func<CallInfo, Exception> createException) =>
        Throw(createException);
}