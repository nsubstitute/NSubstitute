### YamlMime:ManagedReference
items:
- uid: NSubstitute.Substitute
  commentId: T:NSubstitute.Substitute
  id: Substitute
  parent: NSubstitute
  children:
  - NSubstitute.Substitute.For(System.Type[],System.Object[])
  - NSubstitute.Substitute.ForPartsOf``1(System.Object[])
  - NSubstitute.Substitute.ForTypeForwardingTo``2(System.Object[])
  - NSubstitute.Substitute.For``1(System.Object[])
  - NSubstitute.Substitute.For``2(System.Object[])
  - NSubstitute.Substitute.For``3(System.Object[])
  langs:
  - csharp
  - vb
  name: Substitute
  nameWithType: Substitute
  fullName: NSubstitute.Substitute
  type: Class
  source:
    remote:
      path: src/NSubstitute/Substitute.cs
      branch: copilot/fix-8e5d1cea-abae-4546-925f-dabd0155be9d
      repo: https://github.com/nsubstitute/NSubstitute
    id: Substitute
    path: ../src/NSubstitute/Substitute.cs
    startLine: 8
  assemblies:
  - NSubstitute
  namespace: NSubstitute
  summary: 'Create a substitute for one or more types. For example: <code>Substitute.For&lt;ISomeType&gt;()</code>'
  example: []
  syntax:
    content: public static class Substitute
    content.vb: Public Module Substitute
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: NSubstitute.Substitute.For``1(System.Object[])
  commentId: M:NSubstitute.Substitute.For``1(System.Object[])
  id: For``1(System.Object[])
  parent: NSubstitute.Substitute
  langs:
  - csharp
  - vb
  name: For<T>(params object[])
  nameWithType: Substitute.For<T>(params object[])
  fullName: NSubstitute.Substitute.For<T>(params object[])
  type: Method
  source:
    remote:
      path: src/NSubstitute/Substitute.cs
      branch: copilot/fix-8e5d1cea-abae-4546-925f-dabd0155be9d
      repo: https://github.com/nsubstitute/NSubstitute
    id: For
    path: ../src/NSubstitute/Substitute.cs
    startLine: 18
  assemblies:
  - NSubstitute
  namespace: NSubstitute
  summary: >-
    Substitute for an interface or class.

    <p>Be careful when specifying a class, as all non-virtual members will actually be executed. Only virtual members

    can be recorded or have return values specified.</p>
  example: []
  syntax:
    content: >-
      [Pure]

      public static T For<T>(params object[] constructorArguments) where T : class
    parameters:
    - id: constructorArguments
      type: System.Object[]
      description: Arguments required to construct a class being substituted. Not required for interfaces or classes with default constructors.
    typeParameters:
    - id: T
      description: The type of interface or class to substitute.
    return:
      type: '{T}'
      description: A substitute for the interface or class.
    content.vb: >-
      <Pure>

      Public Shared Function [For](Of T As Class)(ParamArray constructorArguments As Object()) As T
  overload: NSubstitute.Substitute.For*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Substitute.For(Of T)(ParamArray Object())
  fullName.vb: NSubstitute.Substitute.For(Of T)(ParamArray Object())
  name.vb: For(Of T)(ParamArray Object())
- uid: NSubstitute.Substitute.For``2(System.Object[])
  commentId: M:NSubstitute.Substitute.For``2(System.Object[])
  id: For``2(System.Object[])
  parent: NSubstitute.Substitute
  langs:
  - csharp
  - vb
  name: For<T1, T2>(params object[])
  nameWithType: Substitute.For<T1, T2>(params object[])
  fullName: NSubstitute.Substitute.For<T1, T2>(params object[])
  type: Method
  source:
    remote:
      path: src/NSubstitute/Substitute.cs
      branch: copilot/fix-8e5d1cea-abae-4546-925f-dabd0155be9d
      repo: https://github.com/nsubstitute/NSubstitute
    id: For
    path: ../src/NSubstitute/Substitute.cs
    startLine: 34
  assemblies:
  - NSubstitute
  namespace: NSubstitute
  summary: >-
    <p>Substitute for multiple interfaces or a class that implements an interface. At most one class can be specified.</p>

    <p>Be careful when specifying a class, as all non-virtual members will actually be executed. Only virtual members

    can be recorded or have return values specified.</p>
  example: []
  syntax:
    content: >-
      [Pure]

      public static T1 For<T1, T2>(params object[] constructorArguments) where T1 : class where T2 : class
    parameters:
    - id: constructorArguments
      type: System.Object[]
      description: Arguments required to construct a class being substituted. Not required for interfaces or classes with default constructors.
    typeParameters:
    - id: T1
      description: The type of interface or class to substitute.
    - id: T2
      description: An additional interface or class (maximum of one class) the substitute should implement.
    return:
      type: '{T1}'
      description: A substitute of type T1, that also implements T2.
    content.vb: >-
      <Pure>

      Public Shared Function [For](Of T1 As Class, T2 As Class)(ParamArray constructorArguments As Object()) As T1
  overload: NSubstitute.Substitute.For*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Substitute.For(Of T1, T2)(ParamArray Object())
  fullName.vb: NSubstitute.Substitute.For(Of T1, T2)(ParamArray Object())
  name.vb: For(Of T1, T2)(ParamArray Object())
- uid: NSubstitute.Substitute.For``3(System.Object[])
  commentId: M:NSubstitute.Substitute.For``3(System.Object[])
  id: For``3(System.Object[])
  parent: NSubstitute.Substitute
  langs:
  - csharp
  - vb
  name: For<T1, T2, T3>(params object[])
  nameWithType: Substitute.For<T1, T2, T3>(params object[])
  fullName: NSubstitute.Substitute.For<T1, T2, T3>(params object[])
  type: Method
  source:
    remote:
      path: src/NSubstitute/Substitute.cs
      branch: copilot/fix-8e5d1cea-abae-4546-925f-dabd0155be9d
      repo: https://github.com/nsubstitute/NSubstitute
    id: For
    path: ../src/NSubstitute/Substitute.cs
    startLine: 53
  assemblies:
  - NSubstitute
  namespace: NSubstitute
  summary: >-
    <p>Substitute for multiple interfaces or a class that implements multiple interfaces. At most one class can be specified.</p>

    If additional interfaces are required use the <xref href="NSubstitute.Substitute.For(System.Type%5b%5d%2cSystem.Object%5b%5d)" data-throw-if-not-resolved="false"></xref> overload.

    <p>Be careful when specifying a class, as all non-virtual members will actually be executed. Only virtual members

    can be recorded or have return values specified.</p>
  example: []
  syntax:
    content: >-
      [Pure]

      public static T1 For<T1, T2, T3>(params object[] constructorArguments) where T1 : class where T2 : class where T3 : class
    parameters:
    - id: constructorArguments
      type: System.Object[]
      description: Arguments required to construct a class being substituted. Not required for interfaces or classes with default constructors.
    typeParameters:
    - id: T1
      description: The type of interface or class to substitute.
    - id: T2
      description: An additional interface or class (maximum of one class) the substitute should implement.
    - id: T3
      description: An additional interface or class (maximum of one class) the substitute should implement.
    return:
      type: '{T1}'
      description: A substitute of type T1, that also implements T2 and T3.
    content.vb: >-
      <Pure>

      Public Shared Function [For](Of T1 As Class, T2 As Class, T3 As Class)(ParamArray constructorArguments As Object()) As T1
  overload: NSubstitute.Substitute.For*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Substitute.For(Of T1, T2, T3)(ParamArray Object())
  fullName.vb: NSubstitute.Substitute.For(Of T1, T2, T3)(ParamArray Object())
  name.vb: For(Of T1, T2, T3)(ParamArray Object())
- uid: NSubstitute.Substitute.For(System.Type[],System.Object[])
  commentId: M:NSubstitute.Substitute.For(System.Type[],System.Object[])
  id: For(System.Type[],System.Object[])
  parent: NSubstitute.Substitute
  langs:
  - csharp
  - vb
  name: For(Type[], object[])
  nameWithType: Substitute.For(Type[], object[])
  fullName: NSubstitute.Substitute.For(System.Type[], object[])
  type: Method
  source:
    remote:
      path: src/NSubstitute/Substitute.cs
      branch: copilot/fix-8e5d1cea-abae-4546-925f-dabd0155be9d
      repo: https://github.com/nsubstitute/NSubstitute
    id: For
    path: ../src/NSubstitute/Substitute.cs
    startLine: 70
  assemblies:
  - NSubstitute
  namespace: NSubstitute
  summary: >-
    <p>Substitute for multiple interfaces or a class that implements multiple interfaces. At most one class can be specified.</p>

    <p>Be careful when specifying a class, as all non-virtual members will actually be executed. Only virtual members

    can be recorded or have return values specified.</p>
  example: []
  syntax:
    content: >-
      [Pure]

      public static object For(Type[] typesToProxy, object[] constructorArguments)
    parameters:
    - id: typesToProxy
      type: System.Type[]
      description: The types of interfaces or a type of class and multiple interfaces the substitute should implement.
    - id: constructorArguments
      type: System.Object[]
      description: Arguments required to construct a class being substituted. Not required for interfaces or classes with default constructors.
    return:
      type: System.Object
      description: A substitute implementing the specified types.
    content.vb: >-
      <Pure>

      Public Shared Function [For](typesToProxy As Type(), constructorArguments As Object()) As Object
  overload: NSubstitute.Substitute.For*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Substitute.For(Type(), Object())
  fullName.vb: NSubstitute.Substitute.For(System.Type(), Object())
  name.vb: For(Type(), Object())
- uid: NSubstitute.Substitute.ForPartsOf``1(System.Object[])
  commentId: M:NSubstitute.Substitute.ForPartsOf``1(System.Object[])
  id: ForPartsOf``1(System.Object[])
  parent: NSubstitute.Substitute
  langs:
  - csharp
  - vb
  name: ForPartsOf<T>(params object[])
  nameWithType: Substitute.ForPartsOf<T>(params object[])
  fullName: NSubstitute.Substitute.ForPartsOf<T>(params object[])
  type: Method
  source:
    remote:
      path: src/NSubstitute/Substitute.cs
      branch: copilot/fix-8e5d1cea-abae-4546-925f-dabd0155be9d
      repo: https://github.com/nsubstitute/NSubstitute
    id: ForPartsOf
    path: ../src/NSubstitute/Substitute.cs
    startLine: 87
  assemblies:
  - NSubstitute
  namespace: NSubstitute
  summary: >-
    Create a substitute for a class that behaves just like a real instance of the class, but also

    records calls made to its virtual members and allows for specific members to be substituted

    by using <xref href="NSubstitute.Core.WhenCalled%601.DoNotCallBase?text=When(()+%3d%3e+call).DoNotCallBase()" data-throw-if-not-resolved="false"></xref> or by

    <xref href="NSubstitute.SubstituteExtensions.Returns%60%601(%60%600%2c%60%600%2c%60%600%5b%5d)?text=setting+a+value+to+return+value" data-throw-if-not-resolved="false"></xref> for that member.
  example: []
  syntax:
    content: >-
      [Pure]

      public static T ForPartsOf<T>(params object[] constructorArguments) where T : class
    parameters:
    - id: constructorArguments
      type: System.Object[]
      description: ''
    typeParameters:
    - id: T
      description: The type to substitute for parts of. Must be a class; not a delegate or interface.
    return:
      type: '{T}'
      description: >-
        An instance of the class that will execute real methods when called, but allows parts to be selectively
            overridden via `Returns` and `When..DoNotCallBase`.
    content.vb: >-
      <Pure>

      Public Shared Function ForPartsOf(Of T As Class)(ParamArray constructorArguments As Object()) As T
  overload: NSubstitute.Substitute.ForPartsOf*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Substitute.ForPartsOf(Of T)(ParamArray Object())
  fullName.vb: NSubstitute.Substitute.ForPartsOf(Of T)(ParamArray Object())
  name.vb: ForPartsOf(Of T)(ParamArray Object())
- uid: NSubstitute.Substitute.ForTypeForwardingTo``2(System.Object[])
  commentId: M:NSubstitute.Substitute.ForTypeForwardingTo``2(System.Object[])
  id: ForTypeForwardingTo``2(System.Object[])
  parent: NSubstitute.Substitute
  langs:
  - csharp
  - vb
  name: ForTypeForwardingTo<TInterface, TClass>(params object[])
  nameWithType: Substitute.ForTypeForwardingTo<TInterface, TClass>(params object[])
  fullName: NSubstitute.Substitute.ForTypeForwardingTo<TInterface, TClass>(params object[])
  type: Method
  source:
    remote:
      path: src/NSubstitute/Substitute.cs
      branch: copilot/fix-8e5d1cea-abae-4546-925f-dabd0155be9d
      repo: https://github.com/nsubstitute/NSubstitute
    id: ForTypeForwardingTo
    path: ../src/NSubstitute/Substitute.cs
    startLine: 108
  assemblies:
  - NSubstitute
  namespace: NSubstitute
  summary: >-
    Creates a proxy for a class that implements an interface, forwarding methods and properties to an instance of the class, effectively mimicking a real instance.

    Both the interface and the class must be provided as parameters.

    The proxy will log calls made to the interface members and delegate them to an instance of the class. Specific members can be substituted

    by using <xref href="NSubstitute.Core.WhenCalled%601.DoNotCallBase?text=When(()+%3d%3e+call).DoNotCallBase()" data-throw-if-not-resolved="false"></xref> or by

    <xref href="NSubstitute.SubstituteExtensions.Returns%60%601(%60%600%2c%60%600%2c%60%600%5b%5d)?text=setting+a+value+to+return+value" data-throw-if-not-resolved="false"></xref> for that member.

    This extension supports sealed classes and non-virtual members, with some limitations. Since the substituted method is non-virtual, internal calls within the object will invoke the original implementation and will not be logged.
  example: []
  syntax:
    content: >-
      [Pure]

      public static TInterface ForTypeForwardingTo<TInterface, TClass>(params object[] constructorArguments) where TInterface : class
    parameters:
    - id: constructorArguments
      type: System.Object[]
      description: ''
    typeParameters:
    - id: TInterface
      description: The interface the substitute will implement.
    - id: TClass
      description: The class type implementing the interface. Must be a class; not a delegate or interface.
    return:
      type: '{TInterface}'
      description: >-
        An object implementing the selected interface. Calls will be forwarded to the actuall methods, but allows parts to be selectively
            overridden via `Returns` and `When..DoNotCallBase`.
    content.vb: >-
      <Pure>

      Public Shared Function ForTypeForwardingTo(Of TInterface As Class, TClass)(ParamArray constructorArguments As Object()) As TInterface
  overload: NSubstitute.Substitute.ForTypeForwardingTo*
  attributes:
  - type: System.Diagnostics.Contracts.PureAttribute
    ctor: System.Diagnostics.Contracts.PureAttribute.#ctor
    arguments: []
  nameWithType.vb: Substitute.ForTypeForwardingTo(Of TInterface, TClass)(ParamArray Object())
  fullName.vb: NSubstitute.Substitute.ForTypeForwardingTo(Of TInterface, TClass)(ParamArray Object())
  name.vb: ForTypeForwardingTo(Of TInterface, TClass)(ParamArray Object())
references:
- uid: NSubstitute
  commentId: N:NSubstitute
  href: NSubstitute.html
  name: NSubstitute
  nameWithType: NSubstitute
  fullName: NSubstitute
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: NSubstitute.Substitute.For*
  commentId: Overload:NSubstitute.Substitute.For
  href: NSubstitute.Substitute.html#NSubstitute_Substitute_For__1_System_Object___
  name: For
  nameWithType: Substitute.For
  fullName: NSubstitute.Substitute.For
- uid: System.Object[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object[]
  nameWithType: object[]
  fullName: object[]
  nameWithType.vb: Object()
  fullName.vb: Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: '{T1}'
  commentId: '!:T1'
  definition: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: NSubstitute.Substitute.For(System.Type[],System.Object[])
  commentId: M:NSubstitute.Substitute.For(System.Type[],System.Object[])
  isExternal: true
  href: NSubstitute.Substitute.html#NSubstitute_Substitute_For_System_Type___System_Object___
  name: For(Type[], object[])
  nameWithType: Substitute.For(Type[], object[])
  fullName: NSubstitute.Substitute.For(System.Type[], object[])
  nameWithType.vb: Substitute.For(Type(), Object())
  fullName.vb: NSubstitute.Substitute.For(System.Type(), Object())
  name.vb: For(Type(), Object())
  spec.csharp:
  - uid: NSubstitute.Substitute.For(System.Type[],System.Object[])
    name: For
    href: NSubstitute.Substitute.html#NSubstitute_Substitute_For_System_Type___System_Object___
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: NSubstitute.Substitute.For(System.Type[],System.Object[])
    name: For
    href: NSubstitute.Substitute.html#NSubstitute_Substitute_For_System_Type___System_Object___
  - name: (
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: System.Type[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullName.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Type
    name: Type
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.type
  - name: (
  - name: )
- uid: NSubstitute.Core.WhenCalled`1.DoNotCallBase
  commentId: M:NSubstitute.Core.WhenCalled`1.DoNotCallBase
  href: NSubstitute.Core.WhenCalled-1.html#NSubstitute_Core_WhenCalled_1_DoNotCallBase
  name: DoNotCallBase()
  nameWithType: WhenCalled<T>.DoNotCallBase()
  fullName: NSubstitute.Core.WhenCalled<T>.DoNotCallBase()
  nameWithType.vb: WhenCalled(Of T).DoNotCallBase()
  fullName.vb: NSubstitute.Core.WhenCalled(Of T).DoNotCallBase()
  spec.csharp:
  - uid: NSubstitute.Core.WhenCalled`1.DoNotCallBase
    name: DoNotCallBase
    href: NSubstitute.Core.WhenCalled-1.html#NSubstitute_Core_WhenCalled_1_DoNotCallBase
  - name: (
  - name: )
  spec.vb:
  - uid: NSubstitute.Core.WhenCalled`1.DoNotCallBase
    name: DoNotCallBase
    href: NSubstitute.Core.WhenCalled-1.html#NSubstitute_Core_WhenCalled_1_DoNotCallBase
  - name: (
  - name: )
- uid: NSubstitute.SubstituteExtensions.Returns``1(``0,``0,``0[])
  commentId: M:NSubstitute.SubstituteExtensions.Returns``1(``0,``0,``0[])
  href: NSubstitute.SubstituteExtensions.html#NSubstitute_SubstituteExtensions_Returns__1___0___0___0___
  name: Returns<T>(T, T, params T[])
  nameWithType: SubstituteExtensions.Returns<T>(T, T, params T[])
  fullName: NSubstitute.SubstituteExtensions.Returns<T>(T, T, params T[])
  nameWithType.vb: SubstituteExtensions.Returns(Of T)(T, T, ParamArray T())
  fullName.vb: NSubstitute.SubstituteExtensions.Returns(Of T)(T, T, ParamArray T())
  name.vb: Returns(Of T)(T, T, ParamArray T())
  spec.csharp:
  - uid: NSubstitute.SubstituteExtensions.Returns``1(``0,``0,``0[])
    name: Returns
    href: NSubstitute.SubstituteExtensions.html#NSubstitute_SubstituteExtensions_Returns__1___0___0___0___
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: params
  - name: " "
  - name: T
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: NSubstitute.SubstituteExtensions.Returns``1(``0,``0,``0[])
    name: Returns
    href: NSubstitute.SubstituteExtensions.html#NSubstitute_SubstituteExtensions_Returns__1___0___0___0___
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: ParamArray
  - name: " "
  - name: T
  - name: (
  - name: )
  - name: )
- uid: NSubstitute.Substitute.ForPartsOf*
  commentId: Overload:NSubstitute.Substitute.ForPartsOf
  href: NSubstitute.Substitute.html#NSubstitute_Substitute_ForPartsOf__1_System_Object___
  name: ForPartsOf
  nameWithType: Substitute.ForPartsOf
  fullName: NSubstitute.Substitute.ForPartsOf
- uid: NSubstitute.Substitute.ForTypeForwardingTo*
  commentId: Overload:NSubstitute.Substitute.ForTypeForwardingTo
  href: NSubstitute.Substitute.html#NSubstitute_Substitute_ForTypeForwardingTo__2_System_Object___
  name: ForTypeForwardingTo
  nameWithType: Substitute.ForTypeForwardingTo
  fullName: NSubstitute.Substitute.ForTypeForwardingTo
- uid: '{TInterface}'
  commentId: '!:TInterface'
  definition: TInterface
  name: TInterface
  nameWithType: TInterface
  fullName: TInterface
- uid: TInterface
  commentId: '!:TInterface'
  name: TInterface
  nameWithType: TInterface
  fullName: TInterface
