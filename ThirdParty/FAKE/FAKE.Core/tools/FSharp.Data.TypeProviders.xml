<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FSharp.Data.TypeProviders</name></assembly>
<members>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSData.SR.xmlDocSimplifiedDataContext(System.String)">
<summary>
 A simplified data context for the %s. The full data context object is available via the DataContext property.
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:58)
</summary>
</member>
<member name="M:FSData.SR.xmlDocGetSimplifiedContext(System.String)">
<summary>
 Get a simplified data context for this %s. By default, no credentials are set
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:62)
</summary>
</member>
<member name="M:FSData.SR.xmlDocGetFullContext(System.String)">
<summary>
 Gets the full data context object for this %s
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:61)
</summary>
</member>
<member name="M:FSData.SR.xmlDocGetEntities(System.String,System.String)">
<summary>
 Gets the &apos;%s&apos; entities from the %s. This property may be used as the source in a query expression.
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:60)
</summary>
</member>
<member name="M:FSData.SR.xmlDocFullServiceTypesAPINoCredentials(System.String,System.String)">
 <summary><para>The full API to the %s.</para><para>To use the service via the full API, create an instance of one of the types %s.</para></summary>
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:57)
</member>
<member name="M:FSData.SR.xmlDocFullServiceTypesAPI(System.String,System.String)">
 <summary><para>The full API to the %s.</para><para>To use the service via the full API, create an instance of one of the types %s.</para><para>You may need to set the Credentials property on the instance.</para></summary>
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:56)
</member>
<member name="M:FSData.SR.xmlDocExecuteProcedure(System.String)">
<summary>
 Execute the &apos;%s&apos; procedure
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:59)
</summary>
</member>
<member name="M:FSData.SR.xmlDocDisposeSimplifiedContext">
<summary>
 Disposes the given context
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:77)
</summary>
</member>
<member name="M:FSData.SR.xmlDocContainsTheSimplifiedContextTypes(System.String)">
<summary>
 Contains the simplified context types for the %s
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:55)
</summary>
</member>
<member name="M:FSData.SR.xmlDocConstructSimplifiedContext(System.String)">
<summary>
 Construct a simplified data context for this %s. By default, no credentials are set
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:63)
</summary>
</member>
<member name="M:FSData.SR.wsdlServiceTypeHelp">
 <summary>Provides the types to access a WSDL web service</summary><param name='ServiceUri'>The Uri for the WSDL service</param><param name='LocalSchemaFile'>The .wsdlschema file to store locally cached service schema</param><param name='ForceUpdate'>Require that a direct connection to the service be available at design-time and force the refresh of the local schema file (default: true)</param><param name='ResolutionFolder'>The folder used to resolve relative file paths at compile-time (default: folder containing the project or script)</param><param name='MessageContract'>Generate Message Contract types (default: false)</param><param name='EnableDataBinding'>Implement the System.ComponentModel.INotifyPropertyChanged interface on all DataContract types to enable data binding (default: false)</param><param name='Serializable'>Generate classes marked with the Serializable Attribute (default: false)</param><param name='Async'>Generate both synchronous and asynchronous method signatures (default: false, which means generate only synchronous method signatures)</param><param name='CollectionType'>A fully-qualified or assembly-qualified name of the type to use as a collection data type when code is generated from schemas</param>
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:74)
</member>
<member name="M:FSData.SR.useNullForGlobalNamespace">
<summary>
 Use &apos;null&apos; for global namespace
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:28)
</summary>
</member>
<member name="M:FSData.SR.unsupportedFramework">
<summary>
 The .NET SDK 4.0 or 4.5 tools could not be found
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:7)
</summary>
</member>
<member name="M:FSData.SR.unreachable">
<summary>
 unreachable
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:23)
</summary>
</member>
<member name="M:FSData.SR.unitNotFound(System.String)">
<summary>
 Unit &apos;%s&apos; not found in FSharp.Core SI module
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:27)
</summary>
</member>
<member name="M:FSData.SR.unexpectedMethodBase">
<summary>
 unexpected MethodBase
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:76)
</summary>
</member>
<member name="M:FSData.SR.typeNotAddedAsAMember(System.String)">
<summary>
 type &apos;%s&apos; was not added as a member to a declaring type
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:29)
</summary>
</member>
<member name="M:FSData.SR.staticParameterNotFoundForType(System.String,System.String)">
<summary>
 static parameter &apos;%s&apos; not found for type &apos;%s&apos;
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:75)
</summary>
</member>
<member name="M:FSData.SR.sqlEntityConnectionTypeHelp">
 <summary>Provides the types to access a database, using a LINQ-to-Entities mapping</summary><param name='ConnectionString'>The connection string for the database connection</param><param name='ConnectionStringName'>The name of the connection string for the database connection in the configuration file.</param><param name='LocalSchemaFile'>The local file for the database schema</param><param name='Provider'>The name of the ADO.NET data provider to be used for ssdl generation (default: System.Data.SqlClient)</param><param name='EntityContainer'>The name to use for the EntityContainer in the conceptual model</param><param name='ConfigFile'>The name of the configuration file used for connection strings (default: app.config or web.config is used)</param><param name='DataDirectory'>The name of the data directory, used to replace |DataDirectory| in connection strings (default: the project or script directory)</param><param name='ResolutionFolder'>The folder used to resolve relative file paths at compile-time (default: folder containing the project or script)</param><param name='ForceUpdate'>Require that a direct connection to the database be available at design-time and force the refresh of the local schema file (default: true)</param><param name='Pluralize'>Automatically pluralize or singularize class and member names using English language rules (default: false)</param><param name='SuppressForeignKeyProperties'>Exclude foreign key properties in entity type definitions (default: false)</param>
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:70)
</member>
<member name="M:FSData.SR.sqlEntityConnection">
<summary>
 SQL Entity connection
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:69)
</summary>
</member>
<member name="M:FSData.SR.sqlDataConnectionTypeHelp">
 <summary>Provides the types to access a database, using a LINQ-to-SQL mapping</summary><param name='ConnectionString'>The connection string for the database connection. If using Visual Studio, a connection string can be found in database properties in the Server Explorer window.</param><param name='ConnectionStringName'>The name of the connection string for the database connection in the configuration file.</param><param name='LocalSchemaFile'>The local .dbml file for the database schema (default: no local schema file)</param><param name='ForceUpdate'>Require that a direct connection to the database be available at design-time and force the refresh of the local schema file (default: true)</param><param name='Pluralize'>Automatically pluralize or singularize class and member names using English language rules (default: false)</param><param name='Views'>Extract database views (default: true)</param><param name='Functions'>Extract database functions (default: true)</param><param name='ConfigFile'>The name of the configuration file used for connection strings (default: app.config or web.config is used)</param><param name='DataDirectory'>The name of the data directory, used to replace |DataDirectory| in connection strings (default: the project or script directory)</param><param name='ResolutionFolder'>The folder used to resolve relative file paths at compile-time (default: folder containing the project or script)</param><param name='StoredProcedures'>Extract stored procedures (default: true)</param><param name='Timeout'>Timeout value in seconds to use when SqlMetal accesses the database (default: 0, which means infinite)</param><param name='ContextTypeName'>The name of data context class (default: derived from database name)</param><param name='Serializable'>Generate uni-directional serializable classes (default: false, which means no serialization)</param>
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:67)
</member>
<member name="M:FSData.SR.sqlDataConnectionInfo">
<summary>
 Gets the connection used by the framework
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:66)
</summary>
</member>
<member name="M:FSData.SR.sqlDataConnection">
<summary>
 SQL connection
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:65)
</summary>
</member>
<member name="P:FSData.SR.SwallowResourceText(System.Boolean)">
<summary>
 If set to true, then all error messages will just return the filled &apos;holes&apos; delimited by &apos;,,,&apos;s - this is for language-neutral testing (e.g. localization-invariant baselines).
</summary>
</member>
<member name="M:FSData.SR.serviceMetadataFileElementIsEmpty">
<summary>
 ServiceMetadataFile element cannot be empty
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:90)
</summary>
</member>
<member name="M:FSData.SR.requiredToolNotFound(System.String)">
<summary>
 The required tool &apos;%s&apos; could not be found.
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:92)
</summary>
</member>
<member name="M:FSData.SR.ptdStaticParametersSuppliedButNotExpected(System.String)">
<summary>
 ProvidedTypeDefinition: static parameters supplied but not expected for %s
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:32)
</summary>
</member>
<member name="M:FSData.SR.ppSetterAlreadyCreated">
<summary>
 ProvidedProperty: setter MethodInfo has already been created
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:22)
</summary>
</member>
<member name="M:FSData.SR.ppGetterAlreadyCreated">
<summary>
 ProvidedProperty: getter MethodInfo has already been created
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:21)
</summary>
</member>
<member name="M:FSData.SR.pmNoInvokerName(System.String,System.String)">
<summary>
 ProvidedMethod: no invoker for %s on type %s
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:19)
</summary>
</member>
<member name="M:FSData.SR.pdErrorExpectingStaticParameters(System.Int32,System.Int32,System.String)">
<summary>
 ProvidedTypeDefinition: expecting %d static parameters but given %d for type %s
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:30)
</summary>
</member>
<member name="M:FSData.SR.pdDefineStaticParametersNotCalled">
<summary>
 ProvidedTypeDefinition: DefineStaticParameters was not called
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:31)
</summary>
</member>
<member name="M:FSData.SR.pcNoInvokerName(System.String,System.String)">
<summary>
 ProvidedConstructor: code already given for %s on type %s
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:20)
</summary>
</member>
<member name="M:FSData.SR.pcNoInvoker(System.String)">
<summary>
 ProvidedConstructor: no invoker for &apos;%s&apos;
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:17)
</summary>
</member>
<member name="M:FSData.SR.pcCodeAlreadyGiven(System.String)">
<summary>
 ProvidedConstructor: code already given for &apos;%s&apos;
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:18)
</summary>
</member>
<member name="M:FSData.SR.odataServiceTypeHelp">
 <summary>Provides the types to access an OData service</summary><param name="ServiceUri">The Uri for the OData service</param><param name='LocalSchemaFile'>The local .csdl file for the service schema</param><param name='ForceUpdate'>Require that a direct connection to the service be available at design-time and force the refresh of the local schema file (default: true)</param><param name='ResolutionFolder'>The folder used to resolve relative file paths at compile-time (default: folder containing the project or script)</param><param name='DataServiceCollection'>Generate collections derived from DataServiceCollection (default: false)</param>
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:73)
</member>
<member name="M:FSData.SR.odataServiceCredentialsInfo">
<summary>
 Gets or sets the authentication information used by each query for this data context object
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:72)
</summary>
</member>
<member name="M:FSData.SR.notYetKnownType">
 <not yet known type>
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:15)
</member>
<member name="M:FSData.SR.notBothConnectionStringOrConnectionStringName">
<summary>
 When using this provider you must specify either a connection string or a connection string name, but not both. To specify a connection string, use SqlDataConnection&lt;\&quot;...connection string...\&quot;&gt;.
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:86)
</summary>
</member>
<member name="M:FSData.SR.notAnArrayPointerOrByref">
<summary>
 not an array, pointer or byref type
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:26)
</summary>
</member>
<member name="M:FSData.SR.nonGenericType">
<summary>
 non-generic type
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:25)
</summary>
</member>
<member name="M:FSData.SR.nonEquivalentConnectionString">
<summary>
 Connection string presented in EntityClient format can differ only in provider-specific part.
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:82)
</summary>
</member>
<member name="M:FSData.SR.nonArrayType">
<summary>
 non-array type
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:24)
</summary>
</member>
<member name="M:FSData.SR.noConnectionStringOrConnectionStringName(System.String)">
<summary>
 When using this provider you must specify either a connection string or a connection string name. To specify a connection string, use %s&lt;\&quot;...connection string...\&quot;&gt;.
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:85)
</summary>
</member>
<member name="M:FSData.SR.noConfigFileFound2(System.String)">
<summary>
 A configuration string name was specified but the configuration file &apos;%s&apos; was not found
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:84)
</summary>
</member>
<member name="M:FSData.SR.noConfigFileFound1">
<summary>
 A configuration string name was specified but no configuration file was found. Neither app.config nor web.config found in project or script directory.
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:83)
</summary>
</member>
<member name="M:FSData.SR.moreThanOneNestedType(System.String,System.String)">
<summary>
 There is more than one nested type called &apos;%s&apos; in type &apos;%s&apos;
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:39)
</summary>
</member>
<member name="M:FSData.SR.invalidWsdlUri">
<summary>
 The parameter &apos;ServiceUri&apos; cannot be an empty string.
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:91)
</summary>
</member>
<member name="M:FSData.SR.invalidProviderInConfigFile(System.String,System.String,System.String)">
<summary>
 Invalid provider &apos;%s&apos; in connection string entry &apos;%s&apos; in config file &apos;%s&apos;. SqlDataConnection can only be used with provider &apos;System.Data.SqlClient&apos;.
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:87)
</summary>
</member>
<member name="M:FSData.SR.invalidOperationOnProvidedType(System.String,System.String)">
<summary>
 The operation &apos;%s&apos; on item &apos;%s&apos; should not be called on provided type, member or parameter
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:13)
</summary>
</member>
<member name="M:FSData.SR.invalidDataContextClassName(System.String)">
<summary>
 %s is not valid name for data context class
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:78)
</summary>
</member>
<member name="M:FSData.SR.invalidConnectionStringInConfigFile(System.String,System.String,System.String)">
<summary>
 Invalid empty connection string &apos;%s&apos; for the connection string name &apos;%s&apos; in config file &apos;%s&apos;
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:88)
</summary>
</member>
<member name="M:FSData.SR.invalidConnectionString">
<summary>
 The supplied connection string should be either a valid provider-specific connection string or a valid connection string accepted by the EntityClient.
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:81)
</summary>
</member>
<member name="M:FSData.SR.gpiNeedToHandleSpecifiedReturnType">
<summary>
 Need to handle specified return type in GetPropertyImpl
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:35)
</summary>
</member>
<member name="M:FSData.SR.gpiNeedToHandleSpecifiedParameterTypes">
<summary>
 Need to handle specified parameter types in GetPropertyImpl
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:36)
</summary>
</member>
<member name="M:FSData.SR.gpiNeedToHandleSpecifiedModifiers">
<summary>
 Need to handle specified modifiers in GetPropertyImpl
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:37)
</summary>
</member>
<member name="M:FSData.SR.gpiNeedToHandleBinder">
<summary>
 Need to handle binder in GetPropertyImpl
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:38)
</summary>
</member>
<member name="P:FSData.SR.SwallowResourceText">
<summary>
 If set to true, then all error messages will just return the filled &apos;holes&apos; delimited by &apos;,,,&apos;s - this is for language-neutral testing (e.g. localization-invariant baselines).
</summary>
</member>
<member name="M:FSData.SR.getMethodImplDoesNotSupportOverloads">
<summary>
 GetMethodImpl does not support overloads
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:34)
</summary>
</member>
<member name="M:FSData.SR.fixedQueriesNotSupported">
<summary>
 The provided ServiceUri is for a data service that supports fixed queries. The OData type provider does not support such services.
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:79)
</summary>
</member>
<member name="M:FSData.SR.fileDoesNotContainXMLElement(System.String,System.String)">
<summary>
 The file &apos;%s&apos; doesn&apos;t contain XML element &apos;%s&apos;
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:48)
</summary>
</member>
<member name="M:FSData.SR.failedToLoadFileAsXML(System.String)">
<summary>
 Failed to load the file &apos;%s&apos; as XML
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:49)
</summary>
</member>
<member name="M:FSData.SR.errorWritingLocalSchemaFile(System.String)">
<summary>
 Error writing to local schema file. %s
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:45)
</summary>
</member>
<member name="M:FSData.SR.errorWhileReadingConnectionStringInConfigFile(System.String,System.String,System.String)">
<summary>
 An error occured while reading connection string &apos;%s&apos; from the config file &apos;%s&apos;: &apos;%s&apos;
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:89)
</summary>
</member>
<member name="M:FSData.SR.errorReadingSchema(System.String)">
<summary>
 Error reading schema. %s
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:46)
</summary>
</member>
<member name="M:FSData.SR.errorInvalidExtensionSchema(System.String,System.String)">
<summary>
 The extension of the given LocalSchema file &apos;%s&apos; is not valid. The required extension is &apos;%s&apos;.
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:47)
</summary>
</member>
<member name="M:FSData.SR.edmxFileTypeHelp">
 <summary>Provides the types to access a database with the schema in an EDMX file, using a LINQ-to-Entities mapping</summary><param name='File'>The EDMX file containing the conceptual, storage and mapping schema descriptions</param><param name='ResolutionFolder'>The folder used to resolve relative file paths at compile-time (default: folder containing the project or script)</param>
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:68)
</member>
<member name="M:FSData.SR.edmxFileRequiresDotNet45(System.String)">
<summary>
 File &apos;%s&apos; requires .NET 4.5. To use this file please change project target framework to .NET 4.5.
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:94)
</summary>
</member>
<member name="M:FSData.SR.dqsServicesNotSupported">
<summary>
 Services that implement the Data Quality Services API are not supported.
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:80)
</summary>
</member>
<member name="M:FSData.SR.declaringTypeAlreadySet(System.String)">
<summary>
 ProvidedConstructor: declaringType already set on &apos;%s&apos;
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:16)
</summary>
</member>
<member name="M:FSData.SR.dbmlFileTypeHelp">
 <summary>Provides the types to access a database with the schema in a DBML file, using a LINQ-to-SQL mapping</summary><param name='File'>The DBML file containing the schema description</param><param name='ResolutionFolder'>The folder used to resolve relative file paths at compile-time (default: folder containing the project or script)</param><param name='ContextTypeName'>The name of data context class (default: derived from database name)</param><param name='Serializable'>Generate uni-directional serializable classes (default: false, which means no serialization)</param>
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:64)
</member>
<member name="M:FSData.SR.dataDirectoryNotFound(System.String)">
<summary>
 The data directory &apos;%s&apos; did not exist.
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:93)
</summary>
</member>
<member name="M:FSData.SR.containerTypeAlreadySet(System.String,System.String)">
<summary>
 container type for &apos;%s&apos; was already set to &apos;%s&apos;
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:33)
</summary>
</member>
<member name="M:FSData.SR.constructorFor(System.String)">
<summary>
 constructor for %s
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:14)
</summary>
</member>
<member name="M:FSData.SR.connectionStringNotFound(System.String)">
<summary>
 Connection string &apos;%s&apos; not found in configuration file.
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:95)
</summary>
</member>
<member name="M:FSData.SR.connectionInfo">
<summary>
 Gets the connection used by the object context
 (Originally from C:\Code\fsharp\src\fsharp\FSharp.Data.TypeProviders\FSData.txt:71)
</summary>
</member>
<member name="M:FSData.SR.RunStartupValidation">
<summary>
 Call this method once to validate that all known resources are valid; throws if not
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Internal.Utilities.TypeProvider.Emit.ProvidedTypeDefinition.SuppressRelocation(System.Boolean)">
<summary>
 Get or set a flag indicating if the ProvidedTypeDefinition has type-relocation suppressed
</summary>
</member>
<member name="P:Internal.Utilities.TypeProvider.Emit.ProvidedTypeDefinition.IsErased(System.Boolean)">
<summary>
 Get or set a flag indicating if the ProvidedTypeDefinition is erased
</summary>
</member>
<member name="P:Internal.Utilities.TypeProvider.Emit.ProvidedTypeDefinition.HideObjectMethods(System.Boolean)">
<summary>
 Suppress System.Object entries in intellisense menus in instances of this provided type 
</summary>
</member>
<member name="P:Internal.Utilities.TypeProvider.Emit.ProvidedTypeDefinition.SuppressRelocation">
<summary>
 Get or set a flag indicating if the ProvidedTypeDefinition has type-relocation suppressed
</summary>
</member>
<member name="P:Internal.Utilities.TypeProvider.Emit.ProvidedTypeDefinition.IsErased">
<summary>
 Get or set a flag indicating if the ProvidedTypeDefinition is erased
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedTypeDefinition.SetAttributes(System.Reflection.TypeAttributes)">
<summary>
 Set the attributes on the provided type. This fully replaces the default TypeAttributes.
</summary>
</member>
<member name="">

</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedTypeDefinition.DefineMethodOverride(Internal.Utilities.TypeProvider.Emit.ProvidedMethod,System.Reflection.MethodInfo)">
<summary>
 Specifies that the given method body implements the given method declaration.
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedTypeDefinition.ConvertToGenerated(System.String,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{System.Reflection.Assembly,System.Byte[]},Microsoft.FSharp.Core.Unit}})">
<summary>
 Emit the given provided type definition and its nested type definitions into an assembly 
 and adjust the &apos;Assembly&apos; property of all provided type definitions to return that
 assembly.

 The assembly is only emitted when the Assembly property on the root type is accessed for the first time.
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedTypeDefinition.AddXmlDocDelayed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary.
 The documentation is only computed once.
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedTypeDefinition.AddXmlDocComputed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary
 The documentation is re-computed  every time it is required.
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedTypeDefinition.AddXmlDoc(System.String)">
<summary>
 Add XML documentation information to this provided constructor
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedTypeDefinition.AddMembersDelayed``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Collections.FSharpList{``0}})">
<summary>
 Add a set of members to a ProvidedTypeDefinition, delaying computation of the members until required by the compilation context.
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedTypeDefinition.AddMembers``1(Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Add a set of members to a ProvidedTypeDefinition
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedTypeDefinition.AddMemberDelayed``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
<summary>
 Add a member to a ProvidedTypeDefinition, delaying computation of the members until required by the compilation context.
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedTypeDefinition.AddMember(System.Reflection.MemberInfo)">
<summary>
 Add a method, property, nested type or other member to a ProvidedTypeDefinition
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedTypeDefinition.AddInterfaceImplementation(System.Type)">
<summary>
 Add the given type as an implemented interface.
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedTypeDefinition.AddDefinitionLocation(System.Int32,System.Int32,System.String)">
<summary>
 Add definition location information to the provided type definition.
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedTypeDefinition.AddAssemblyTypesAsNestedTypesDelayed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.Reflection.Assembly})">
<summary>
 Add the types of the generated assembly as generative types, where types in namespaces get hierarchically positioned as nested types.
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedTypeDefinition.#ctor(System.String,Microsoft.FSharp.Core.FSharpOption{System.Type})">
<summary>
 Create a new provided type definition, to be located as a nested type in some type definition.
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedTypeDefinition.#ctor(System.Reflection.Assembly,System.String,System.String,Microsoft.FSharp.Core.FSharpOption{System.Type})">
<summary>
 Create a new provided type definition in a namespace. 
</summary>
</member>
<member name="T:Internal.Utilities.TypeProvider.Emit.ProvidedTypeDefinition">
<summary>
 Represents an erased provided type definition.
</summary>
</member>
<member name="">

</member>
<member name="T:Internal.Utilities.TypeProvider.Emit.ProvidedStaticParameter">
<summary>
 Represents an erased provided parameter
</summary>
</member>
<member name="P:Internal.Utilities.TypeProvider.Emit.ProvidedProperty.SetterCodeInternal(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Quotations.FSharpExpr[],Microsoft.FSharp.Quotations.FSharpExpr})">
<summary>
 Set the function used to compute the implementation of invocations of this constructor.
</summary>
</member>
<member name="P:Internal.Utilities.TypeProvider.Emit.ProvidedProperty.SetterCode(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr},Microsoft.FSharp.Quotations.FSharpExpr})">
<summary>
 Set the function used to compute the implementation of invocations of the property setter
</summary>
</member>
<member name="P:Internal.Utilities.TypeProvider.Emit.ProvidedProperty.IsStatic(System.Boolean)">
<summary>
 Get or set a flag indicating if the property is static.
</summary>
</member>
<member name="P:Internal.Utilities.TypeProvider.Emit.ProvidedProperty.GetterCodeInternal(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Quotations.FSharpExpr[],Microsoft.FSharp.Quotations.FSharpExpr})">
<summary>
 Set the function used to compute the implementation of invocations of this constructor.
</summary>
</member>
<member name="P:Internal.Utilities.TypeProvider.Emit.ProvidedProperty.GetterCode(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr},Microsoft.FSharp.Quotations.FSharpExpr})">
<summary>
 Set the quotation used to compute the implementation of invocations of this constructor.
</summary>
</member>
<member name="P:Internal.Utilities.TypeProvider.Emit.ProvidedProperty.SetterCodeInternal">
<summary>
 Set the function used to compute the implementation of invocations of this constructor.
</summary>
</member>
<member name="P:Internal.Utilities.TypeProvider.Emit.ProvidedProperty.GetterCodeInternal">
<summary>
 Set the function used to compute the implementation of invocations of this constructor.
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedProperty.AddXmlDocDelayed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedProperty.AddXmlDocComputed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary
 The documentation is re-computed  every time it is required.
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedProperty.AddXmlDoc(System.String)">
<summary>
 Add XML documentation information to this provided constructor
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedProperty.AddDefinitionLocation(System.Int32,System.Int32,System.String)">
<summary>
 Add definition location information to the provided type definition.
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedProperty.#ctor(System.String,System.Type,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{Internal.Utilities.TypeProvider.Emit.ProvidedParameter}})">
<summary>
 Create a new provided type. It is not initially associated with any specific provided type definition.
</summary>
</member>
<member name="T:Internal.Utilities.TypeProvider.Emit.ProvidedProperty">
<summary>
 Represents an erased provided property.
</summary>
</member>
<member name="P:Internal.Utilities.TypeProvider.Emit.ProvidedMethod.IsStaticMethod(System.Boolean)">
<summary>
 Get or set a flag indicating if the property is static.
</summary>
</member>
<member name="P:Internal.Utilities.TypeProvider.Emit.ProvidedMethod.InvokeCodeInternal(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Quotations.FSharpExpr[],Microsoft.FSharp.Quotations.FSharpExpr})">
<summary>
 Set the function used to compute the implementation of invocations of this method.
</summary>
</member>
<member name="P:Internal.Utilities.TypeProvider.Emit.ProvidedMethod.InvokeCode(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr},Microsoft.FSharp.Quotations.FSharpExpr})">
<summary>
 Set the quotation used to compute the implementation of invocations of this method.
</summary>
</member>
<member name="P:Internal.Utilities.TypeProvider.Emit.ProvidedMethod.IsStaticMethod">
<summary>
 Get or set a flag indicating if the property is static.
</summary>
</member>
<member name="P:Internal.Utilities.TypeProvider.Emit.ProvidedMethod.InvokeCodeInternal">
<summary>
 Set the function used to compute the implementation of invocations of this method.
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedMethod.SetMethodAttrs(System.Reflection.MethodAttributes)">
<summary>
 Set the method attributes of the method. By default these are simple &apos;MethodAttributes.Public&apos;
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedMethod.AddXmlDocDelayed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedMethod.AddXmlDocComputed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary
 The documentation is re-computed  every time it is required.
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedMethod.AddXmlDoc(System.String)">
<summary>
 Add XML documentation information to this provided constructor
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedMethod.AddDefinitionLocation(System.Int32,System.Int32,System.String)">
<summary>
 Add definition location information to the provided type definition.
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedMethod.#ctor(System.String,Microsoft.FSharp.Collections.FSharpList{Internal.Utilities.TypeProvider.Emit.ProvidedParameter},System.Type)">
<summary>
 Create a new provided method. It is not initially associated with any specific provided type definition.
</summary>
</member>
<member name="">

</member>
<member name="P:Internal.Utilities.TypeProvider.Emit.ProvidedConstructor.InvokeCodeInternal(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Quotations.FSharpExpr[],Microsoft.FSharp.Quotations.FSharpExpr})">
<summary>
 Set the function used to compute the implementation of invocations of this constructor.
</summary>
</member>
<member name="P:Internal.Utilities.TypeProvider.Emit.ProvidedConstructor.InvokeCode(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr},Microsoft.FSharp.Quotations.FSharpExpr})">
<summary>
 Set the quotation used to compute the implementation of invocations of this constructor.
</summary>
</member>
<member name="P:Internal.Utilities.TypeProvider.Emit.ProvidedConstructor.InvokeCodeInternal">
<summary>
 Set the function used to compute the implementation of invocations of this constructor.
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedConstructor.AddXmlDocDelayed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the computation of the documentation is delayed until necessary
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedConstructor.AddXmlDocComputed(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.String})">
<summary>
 Add XML documentation information to this provided constructor, where the documentation is re-computed  every time it is required.
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedConstructor.AddXmlDoc(System.String)">
<summary>
 Add XML documentation information to this provided constructor
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedConstructor.AddDefinitionLocation(System.Int32,System.Int32,System.String)">
<summary>
 Add definition location information to the provided constructor.
</summary>
</member>
<member name="M:Internal.Utilities.TypeProvider.Emit.ProvidedConstructor.#ctor(Microsoft.FSharp.Collections.FSharpList{Internal.Utilities.TypeProvider.Emit.ProvidedParameter})">
<summary>
 Create a new provided constructor. It is not initially associated with any specific provided type definition.
</summary>
</member>
<member name="T:Internal.Utilities.TypeProvider.Emit.ProvidedConstructor">
<summary>
 Represents an erased provided constructor.
</summary>
</member>
<member name="">

</member>
<member name="T:Internal.Utilities.TypeProvider.Emit.ProvidedParameter">
<summary>
 Represents an erased provided parameter
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Data.TypeProviders.DesignTime.AssemblyOrPersistentErrorCache`2">
<summary>
 Generate an assembly or cache an error. Do not retry the assembly generation until invalidation occurs.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Data.TypeProviders.DesignTime.DataProviders">
<summary>
 The implementation of the built-in type providers.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Data.TypeProviders.DesignTime.PathResolutionUtils.MakeAbsoluteWithResolutionFolder(System.String,System.String)">
<summary>
 helper that combines getAbsoluteDesignTimeDirectory and makeAbsolute
</summary>
</member>
<member name="M:Microsoft.FSharp.Data.TypeProviders.DesignTime.PathResolutionUtils.MakeAbsolute(System.String,System.String)">
<summary>
 if pathName is NullOrEmpty = returns pathName
 if pathName is absolute path - returns pathName
 else returns makes absolute path from resolutionFolderParam and pathName, using resolutionFolderParam as base part ()
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Data.TypeProviders.DesignTime.PathResolutionUtils">
<summary>
 helper type to isolate manipulation with paths
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Data.TypeProviders.DesignTime.ConfigFiles.tryReadConnectionString(System.String,System.String)">
<summary>
 reads ConnectionStringSettings with name &lt;connectionStringName&gt; from the specified file
 returns either ConnectionStringReadResult.Ok (cs : ConnectionStringSettings) (cs is not null)
 or ConnectionStringReadResult.NotFound if configuration file doesn&apos;t contain ConnectionStringSettings with specified name
 or ConnectionStringReadResult.Error if reading of the file ends with error
</summary>
</member>
<member name="M:Microsoft.FSharp.Data.TypeProviders.DesignTime.ConfigFiles.findConfigFile(System.String,System.String)">
<summary>
 searches for the configuration file that will be used by TP
 designTimeDirectory- root folder
 configFileName - full path to the custom configuration file
</summary>
</member>
<member name="T:Microsoft.FSharp.Data.TypeProviders.DesignTime.ConfigFiles">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Data.TypeProviders.DesignTime.DataSvcUtil.addDefaultUriToDataSvcUtilCSharpFile(System.String,System.String)">
<summary>
 Add the default service URI to the generated CS file by inserting it as the argument
 to the default data context constructor, also drop the namespace declaration.
</summary>
</member>
<member name="M:Microsoft.FSharp.Data.TypeProviders.DesignTime.DataSvcUtil.Metadata.TryPredictError(System.String)">
<summary>
 Analyzes given metadata file and tries to find evidence of specific cases that may cause datasvcutil to fail
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Data.TypeProviders.DesignTime.DataSvcUtil.Metadata">

</member>
<member name="T:Microsoft.FSharp.Data.TypeProviders.DesignTime.DataSvcUtil">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Data.TypeProviders.DesignTime.Dbml">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Data.TypeProviders.DesignTime.Edmx">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Data.TypeProviders.DesignTime.Expr.LetVar``1(System.String,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Quotations.FSharpExpr,``0})">
<summary>
 This helper makes working with Expr.Let a little easier and safer
</summary>
</member>
<member name="T:Microsoft.FSharp.Data.TypeProviders.DesignTime.Expr">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Data.TypeProviders.DesignTime.SqlConnection">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Data.TypeProviders.DesignTime.SqlEntityConnection">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Data.TypeProviders.DesignTime.SvcUtil.unpackFolder(System.String,System.String)">
<summary>
 assumes that destFolder is already created
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Data.TypeProviders.DesignTime.SvcUtil">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Data.TypeProviders.DesignTime.Utilities.sqlmetal(System.String)">
<summary>
 Run SQLMetal and strip out a decent error message
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Data.TypeProviders.DesignTime.Utilities.tryUseLocalSchemaFile(System.String,System.Boolean,System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Data.TypeProviders.Utility.Util.FileResource,System.String})">
<summary>
 Use a local schema file if the &apos;localSchemaFile&apos; parameter is present (IsNullOrWhiteSpace). Otherwise,
 use a temporary file to hold the metadata description of the service. Always force the update
 of the file if &apos;forceUpdate&apos; is true and the downloaded contents have changed. 
</summary>
</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Data.TypeProviders.DesignTime.Utilities">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Data.TypeProviders.Utility.Util.shell(System.String,System.String,System.String,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.String[],Microsoft.FSharp.Core.FSharpFunc{System.String[],Microsoft.FSharp.Core.Unit}}})">
<summary>
 Throws on failure
</summary>
</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Data.TypeProviders.Utility.Util">

</member>
</members>
</doc>
